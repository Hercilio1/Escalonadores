package T1_1;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;


public class App {
	
	//http://tutorials.jenkov.com/java-collections/queue.html
	
	private static int numeroDeProcessos, tamFatiaDeTempo;
	private static Processo[] listaProcessos;
	private static Queue<Processo> filaProcessos = new LinkedList();
	private static String sjfSaida = "", rrpSaida = "";
	private static long TE,TR, TT;
	
	
	public static void sjf() {
		/* AQUI ESTÃ� O CLONE
		* Depois que eu setto o processo para pronto = true 
		* altera tanto no aux quanto na listaProcesso.
		* Imagino que ao invÃ©s de usar um aux eu uso listaProcessos msm e 
		* dps de executar o sjf eu setto tudo para false. 
		*/
		Processo processoDaVez = null;
		int contTempoDeCadaExecucao = 1;
		int tc = 2;
		int foramExecutados = 0;
		int aux2 = 0;
		TE = TR = TT = 0;
		
		for(int i=0; i<listaProcessos.length; i++) {			
			if(listaProcessos[i].isPronto() == false && listaProcessos[i].getTempoDeChegada() <= contTempoDeCadaExecucao) {	
				if(processoDaVez == null) {processoDaVez = listaProcessos[i];}
				if(listaProcessos[i].getTempoDeExecucao() < processoDaVez.getTempoDeExecucao() || 
						(listaProcessos[i].getTempoDeExecucao() == processoDaVez.getTempoDeExecucao() 
							&& listaProcessos[i].getPrioridade() <= processoDaVez.getPrioridade())) {
					processoDaVez = listaProcessos[i];
					aux2 = i;
				} 
			}			
			if(i == listaProcessos.length -1) {
				if(processoDaVez == null) {
					sjfSaida+= "-";
					contTempoDeCadaExecucao++;
				} else { 
					for(int j=0; j<processoDaVez.getTempoDeExecucao(); j++) {
						sjfSaida += aux2+1;
						contTempoDeCadaExecucao++;
					}
					listaProcessos[aux2].setPronto(true);
					foramExecutados++;
					if(foramExecutados != numeroDeProcessos) {
						sjfSaida+= "TC";
						contTempoDeCadaExecucao+=tc;
					}
				}
				TE = contTempoDeCadaExecucao;
				processoDaVez = null;
				i = -1;
			} 			
			if(foramExecutados == numeroDeProcessos) {
				TR = TE;
				return;
			}
		}
	}

	
	public static void rrp() {
		Processo processoDaVez = null;
		int prioridade = 1;
		int contTempoDeCadaExecucao = 1;
		int foramExecutados = 0;
		int contaPostergados = 0;
		int repeticoesNulas = 0;
		int trunfo = 0;
	    TE = TR = TT = 0;
		
		while(true) {		
			if(contaPostergados == filaProcessos.size()) {
				prioridade++;
				contaPostergados = 0;
			}		
			if(filaProcessos.peek().getTempoDeChegada() <= contTempoDeCadaExecucao) {
				if(processoDaVez == null) {
					processoDaVez = filaProcessos.peek(); 
				}
				System.out.println(processoDaVez.toString());			
				if(processoDaVez.getPrioridade() > prioridade && repeticoesNulas <= 0) {
					if(processoDaVez.isPronto()) {
						contaPostergados++;
						processoDaVez.setPronto(false);
					}
					
					System.out.println("\n@@");
					for(int i=0; i < filaProcessos.size(); i++) {
						System.out.println(filaProcessos.peek().toString());
						filaProcessos.add(filaProcessos.peek());
						filaProcessos.remove();
					}
					System.out.println("##\n");
					
					filaProcessos.add(processoDaVez);
					filaProcessos.remove();
					processoDaVez = null;
					
					System.out.println("\n@@");
					for(int i=0; i < filaProcessos.size(); i++) {
						System.out.println(filaProcessos.peek().toString());
						filaProcessos.add(filaProcessos.peek());
						filaProcessos.remove();
					}
					System.out.println("##\n");
					
					
				} else {
					if(filaProcessos.peek().getPrioridade() == prioridade) { 
						for(int j=0; j<tamFatiaDeTempo && processoDaVez.getTempoDeExecucao() > 0 ; j++) {
							rrpSaida += filaProcessos.peek().getIdentificador()+1;
							System.out.println(rrpSaida);
							filaProcessos.peek().setTempoDeExecucao(processoDaVez.getTempoDeExecucao() - 1);
							contTempoDeCadaExecucao++;
							repeticoesNulas = 0 - (filaProcessos.size()-1);
						} 
					} else {
						for(int j=0; j<tamFatiaDeTempo && processoDaVez.getTempoDeExecucao() > 0 ; j++) {
							if(contTempoDeCadaExecucao == trunfo) {
								trunfo = 0;
								break;
							} else {
								rrpSaida += filaProcessos.peek().getIdentificador()+1;
								System.out.println(rrpSaida);
								filaProcessos.peek().setTempoDeExecucao(processoDaVez.getTempoDeExecucao() - 1);
								contTempoDeCadaExecucao++;
								repeticoesNulas = 0;
							}
						}
					}
					System.out.println(filaProcessos.peek().toString() + "\n--");
					
					if(processoDaVez.getTempoDeExecucao() == 0) { 				
						filaProcessos.remove();
						foramExecutados++;
						System.out.println(foramExecutados);
					} else {
						filaProcessos.add(processoDaVez);
						filaProcessos.remove();
					}	
					
					if(foramExecutados != numeroDeProcessos) {
						rrpSaida+= "TC";
						contTempoDeCadaExecucao+=2;
					}
					processoDaVez = null;
				}
			} else {
				if(repeticoesNulas == 0) trunfo = filaProcessos.peek().getTempoDeChegada();
				repeticoesNulas++;				
				filaProcessos.add(filaProcessos.peek());
				filaProcessos.remove();
				processoDaVez = null;

			}
			if(foramExecutados == numeroDeProcessos) {
				break;
			}
		}
	}
	
	
	public static void reader(String arquivo) {
		int cont = 0;
		Processo processo;
		Path path1 = Paths.get(arquivo);
		try (BufferedReader reader = Files.newBufferedReader(path1, Charset.defaultCharset())) {
			String line = null;
			while ((line = reader.readLine()) != null) {
				Scanner sc = new Scanner(line).useDelimiter(" ");
				if(cont == 0) {
					numeroDeProcessos = Integer.parseInt(sc.next());
					listaProcessos = new Processo[numeroDeProcessos];
					System.out.println(numeroDeProcessos);
					cont++;
				} else if(cont == 1) {
					tamFatiaDeTempo = Integer.parseInt(sc.next());
					System.out.println(tamFatiaDeTempo);
					cont++;
				} else {
					if(cont >= numeroDeProcessos + 2) break;
					processo = new Processo(Integer.parseInt(sc.next()), 
							Integer.parseInt(sc.next()), Integer.parseInt(sc.next()), false, cont - 2);
					filaProcessos.add(processo);
					listaProcessos[cont - 2] = processo;
					cont++;
				}
			}
		}
		catch (IOException e) {
			System.err.format("Erro de E/S: %s%n", e);
		}
	}

	public static void main(String[] args) {
		reader("trab-so1-teste3.txt");
		for(int i=0; i < filaProcessos.size(); i++) {
			System.out.println(filaProcessos.peek().toString());
			filaProcessos.add(filaProcessos.peek());
			filaProcessos.remove();
		}
		
		System.out.println("\n");
		sjf();
		System.out.println(sjfSaida);
		System.out.println("\n" + "TE = " + TE);
		System.out.println("TR = " + TR);
		System.out.println("\n");

		
		rrp();
		System.out.println(rrpSaida);
	}

}